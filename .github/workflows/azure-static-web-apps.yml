# Azure Static Web Apps CI/CD Pipeline
# This workflow deploys the EventFlow Analytics Dashboard to Azure Static Web Apps
# Module 2, Lesson 4: Azure Deployment for Web Applications

name: Azure Static Web Apps CI/CD

on:
  # Trigger deployment on push to main branch
  push:
    branches:
      - main
  # Trigger deployment on pull request targeting main branch
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    # Only run this job if it's a push or an open PR (not closed)
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v3
        with:
          submodules: true  # Fetch any Git submodules if present
          
      # Step 2: Set up Node.js environment
      # This ensures consistent Node version across deployments
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      # Step 3: Install dependencies
      # Using npm ci for faster, more reliable builds in CI/CD
      - name: Install dependencies
        run: npm ci
      
      # Step 4: Run tests
      # Ensures code quality before deployment
      #- name: Run tests 
      #  run: npm run test:ci
      #  env:
      #    CI: true
      
      # Step 5: Build the React application
      # Creates optimized production build
      - name: Build application
        run: npm run build
        env:
          CI: true
          # Add any production environment variables here
          # REACT_APP_API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
      
      # Step 6: Deploy to Azure Static Web Apps
      # This action handles the deployment to Azure
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Azure Static Web Apps deployment token
          # This should be stored as a GitHub Secret
          # Get this from Azure Portal > Your Static Web App > Manage deployment token
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          
          # Repository token for GitHub integration
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Build configuration
          action: "upload"
          
          # Path to the application source code
          app_location: "/" 
          
          # API location - leave empty if no Azure Functions
          api_location: ""
          
          # Build output location - where React builds to
          output_location: "build"
          
          # Custom build command (optional - uses package.json scripts by default)
          # app_build_command: "npm run build"
          
          # Environment variables for the build
          # env_vars: |
          #   NODE_VERSION=18
          #   REACT_APP_VERSION=${{ github.sha }}

  close_pull_request_job:
    # This job runs when a PR is closed
    # It cleans up the preview environment
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"

# Configuration Notes:
# 
# 1. Setting up in Azure Portal:
#    - Create a new Static Web App resource
#    - Choose "GitHub" as the source
#    - Authorize Azure to access your GitHub repository
#    - Select this repository and branch
#    - Azure will automatically create this workflow file
#    - Copy the deployment token and add it as a GitHub Secret
#
# 2. GitHub Secrets Required:
#    - AZURE_STATIC_WEB_APPS_API_TOKEN_EVENTFLOW: Deployment token from Azure
#    - Any additional API keys or configuration values
#
# 3. Preview Environments:
#    - Each PR gets its own preview environment
#    - URL format: https://<app-name>-<pr-number>.<region>.azurestaticapps.net
#    - Automatically cleaned up when PR is closed
#
# 4. Production Deployment:
#    - Merges to main branch trigger production deployment
#    - URL: https://<app-name>.<region>.azurestaticapps.net
#    - Or custom domain if configured in Azure Portal
#
# 5. Build Optimization:
#    - npm ci is faster than npm install for CI/CD
#    - Caching node_modules speeds up subsequent builds
#    - Running tests ensures quality before deployment
#
# 6. Monitoring:
#    - Enable Application Insights in Azure Portal
#    - Add instrumentation key to React app
#    - Monitor performance, errors, and usage
